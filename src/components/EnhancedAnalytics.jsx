import React, { useState, useMemo } from 'react';
import { Line, Bar, Doughnut, Radar } from 'react-chartjs-2';
import { useAnalytics } from '../hooks/useAnalytics';
import { useHaptic } from '../hooks/useHaptic';
import { PERIODS, WEEKDAY_LABELS } from '../utils/constants';

// –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
const MetricCard = ({ title, value, unit, trend, subtitle, icon, color = 'purple' }) => {
  const colorClasses = {
    purple: 'from-purple-500 to-purple-600',
    blue: 'from-blue-500 to-blue-600',
    green: 'from-green-500 to-green-600',
    orange: 'from-orange-500 to-orange-600',
    red: 'from-red-500 to-red-600',
    indigo: 'from-indigo-500 to-indigo-600'
  };

  return (
    <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 transition-all duration-300 hover:shadow-xl hover:scale-105">
      <div className="flex items-center justify-between mb-2">
        <div className={`w-10 h-10 rounded-lg bg-gradient-to-br ${colorClasses[color]} flex items-center justify-center text-white text-lg`}>
          {icon}
        </div>
        {trend && (
          <div className={`text-sm font-medium ${trend > 0 ? 'text-green-500' : trend < 0 ? 'text-red-500' : 'text-gray-500'}`}>
            {trend > 0 ? '‚Üó' : trend < 0 ? '‚Üò' : '‚Üí'} {Math.abs(trend).toFixed(1)}%
          </div>
        )}
      </div>
      <p className="text-sm text-gray-500 dark:text-gray-400 mb-1">{title}</p>
      <p className="text-2xl font-bold text-gray-900 dark:text-white">
        {typeof value === 'number' ? value.toLocaleString('ru-RU', { maximumFractionDigits: 0 }) : value}
        {unit && <span className="text-base font-normal ml-1">{unit}</span>}
      </p>
      {subtitle && <p className="text-xs text-gray-400 mt-1">{subtitle}</p>}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const AnalyticsSettings = ({ settings, onChange, darkMode }) => {
  return (
    <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
      <h3 className="text-lg font-semibold mb-4 text-gradient-primary">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">–ú–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å (‚ÇΩ)</label>
          <input
            type="number"
            value={settings.monthlyTarget}
            onChange={(e) => onChange({ ...settings, monthlyTarget: Number(e.target.value) })}
            className={`w-full px-3 py-2 rounded-lg border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-gray-50 border-gray-300'} focus:ring-2 focus:ring-purple-500`}
            placeholder="50000"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ –º–µ—Å—è—Ü</label>
          <input
            type="number"
            min="0"
            max="10"
            value={settings.weekendsPerMonth}
            onChange={(e) => onChange({ ...settings, weekendsPerMonth: Number(e.target.value) })}
            className={`w-full px-3 py-2 rounded-lg border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-gray-50 border-gray-300'} focus:ring-2 focus:ring-purple-500`}
            placeholder="2"
          />
          <p className="text-xs text-gray-500 mt-1">–ö—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è</p>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
const ForecastPanel = ({ forecasts, workingDays, darkMode }) => {
  if (!forecasts.week.gross) return null;

  return (
    <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
      <h3 className="text-lg font-semibold mb-4 text-gradient-primary">üìà –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Ö–æ–¥–æ–≤</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <h4 className="font-semibold text-blue-600 dark:text-blue-400">–ù–µ–¥–µ–ª—è</h4>
          <p className="text-lg font-bold">{forecasts.week.net.toLocaleString()} ‚ÇΩ</p>
          <p className="text-xs text-gray-500">5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</p>
        </div>
        
        <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <h4 className="font-semibold text-green-600 dark:text-green-400">–ú–µ—Å—è—Ü</h4>
          <p className="text-lg font-bold">{forecasts.month.net.toLocaleString()} ‚ÇΩ</p>
          <p className="text-xs text-gray-500">{workingDays.month} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</p>
        </div>
        
        <div className="text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
          <h4 className="font-semibold text-purple-600 dark:text-purple-400">–ì–æ–¥</h4>
          <p className="text-lg font-bold">{forecasts.year.net.toLocaleString()} ‚ÇΩ</p>
          <p className="text-xs text-gray-500">{workingDays.year} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</p>
        </div>
      </div>
      
      <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
        <p className="text-sm text-gray-600 dark:text-gray-400">
          üí° –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        </p>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
const TargetProgress = ({ targetAnalysis, darkMode }) => {
  if (!targetAnalysis) return null;

  const { progressPercent, isOnTrack, neededPerDay, remainingDays } = targetAnalysis;

  return (
    <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
      <h3 className="text-lg font-semibold mb-4 text-gradient-primary">üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏</h3>
      
      <div className="mb-4">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –º–µ—Å—è—á–Ω–æ–π —Ü–µ–ª–∏</span>
          <span className={`text-sm font-bold ${isOnTrack ? 'text-green-500' : 'text-orange-500'}`}>
            {progressPercent.toFixed(1)}%
          </span>
        </div>
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
          <div 
            className={`h-3 rounded-full transition-all duration-500 ${isOnTrack ? 'bg-gradient-to-r from-green-400 to-green-600' : 'bg-gradient-to-r from-orange-400 to-orange-600'}`}
            style={{ width: `${Math.min(progressPercent, 100)}%` }}
          ></div>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
          <p className="text-2xl font-bold text-gray-900 dark:text-white">
            {remainingDays}
          </p>
          <p className="text-sm text-gray-500">–¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</p>
        </div>
        
        <div className="text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
          <p className="text-2xl font-bold text-gray-900 dark:text-white">
            {neededPerDay.toLocaleString()} ‚ÇΩ
          </p>
          <p className="text-sm text-gray-500">–Ω—É–∂–Ω–æ –≤ –¥–µ–Ω—å</p>
        </div>
      </div>
      
      <div className={`mt-4 p-3 rounded-lg ${isOnTrack ? 'bg-green-50 dark:bg-green-900/20' : 'bg-orange-50 dark:bg-orange-900/20'}`}>
        <p className={`text-sm ${isOnTrack ? 'text-green-700 dark:text-green-300' : 'text-orange-700 dark:text-orange-300'}`}>
          {isOnTrack ? 
            '‚úÖ –í—ã –∏–¥–µ—Ç–µ –∫ —Ü–µ–ª–∏ –ø–æ –ø–ª–∞–Ω—É!' : 
            `‚ö†Ô∏è –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ ${(neededPerDay - (targetAnalysis.currentEarnings / targetAnalysis.daysWorked)).toLocaleString()} ‚ÇΩ`
          }
        </p>
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export function EnhancedAnalytics({ analyticsShifts, goals, darkMode, selectedPeriod, setSelectedPeriod }) {
  const { hapticButton } = useHaptic();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [settings, setSettings] = useState({
    monthlyTarget: 50000,
    weekendsPerMonth: 2
  });

  const { 
    keyMetrics, 
    forecasts, 
    monthlyTrends, 
    getStats, 
    getWeekdayStats, 
    getWeeklyStats, 
    getPlanFactStats,
    getHourlyEfficiency,
    getTrendAnalysis,
    getTargetAnalysis
  } = useAnalytics(analyticsShifts, goals);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  const stats = getStats(selectedPeriod);
  const trendAnalysis = getTrendAnalysis();
  const targetAnalysis = getTargetAnalysis(settings.monthlyTarget, settings.weekendsPerMonth);
  const hourlyEfficiency = getHourlyEfficiency();
  const forecastData = forecasts(settings.weekendsPerMonth);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
  if (!analyticsShifts || analyticsShifts.length === 0) {
    return (
      <div className="text-center py-20">
        <div className="text-6xl mb-4">üìä</div>
        <h3 className="text-xl font-semibold mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
        <p className="text-gray-500">–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–º–µ–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É</p>
      </div>
    );
  }

  const getChartOptions = (text) => ({
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { 
        position: 'top', 
        labels: { 
          color: darkMode ? '#fff' : '#000',
          font: { size: 12 }
        } 
      },
      title: { 
        display: true, 
        text, 
        color: darkMode ? '#fff' : '#000',
        font: { size: 14, weight: 'bold' }
      }
    },
    scales: {
      x: { 
        ticks: { 
          color: darkMode ? '#fff' : '#000',
          font: { size: 11 }
        },
        grid: {
          color: darkMode ? '#374151' : '#e5e7eb'
        }
      },
      y: { 
        ticks: { 
          color: darkMode ? '#fff' : '#000',
          font: { size: 11 }
        },
        grid: {
          color: darkMode ? '#374151' : '#e5e7eb'
        }
      }
    }
  });

  const chartData = {
    labels: stats.filtered.map(s => new Date(s.date).toLocaleDateString()),
    earnings: stats.filtered.map(s => s.amount),
    picks: stats.filtered.map(s => s.picks),
  };

  return (
    <div className="space-y-6 p-4">
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ */}
      <AnalyticsSettings 
        settings={settings} 
        onChange={setSettings} 
        darkMode={darkMode} 
      />

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div>
        <h2 className="text-xl font-semibold text-center mb-6">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
          <MetricCard 
            title="–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ" 
            value={keyMetrics.totalEarnings} 
            unit="‚ÇΩ" 
            icon="üí∞"
            color="green"
          />
          <MetricCard 
            title="–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Å–º–µ–Ω—É" 
            value={keyMetrics.avgPerShift} 
            unit="‚ÇΩ"
            trend={trendAnalysis?.trendPercent}
            icon="üìà"
            color="blue"
          />
          <MetricCard 
            title="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" 
            value={keyMetrics.efficiency.toFixed(2)} 
            unit="‚ÇΩ/–ø–∏–∫"
            subtitle="–†—É–±–ª–µ–π –∑–∞ –ø–∏–∫"
            icon="‚ö°"
            color="orange"
          />
          <MetricCard 
            title="–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å" 
            value={keyMetrics.consistency.toFixed(1)} 
            unit="%"
            subtitle="–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤"
            icon="üéØ"
            color="purple"
          />
          <MetricCard 
            title="–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π" 
            value={keyMetrics.totalDays} 
            unit="–¥–Ω"
            icon="üìÖ"
            color="indigo"
          />
          <MetricCard 
            title="–†–æ—Å—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π" 
            value={keyMetrics.growthRate.toFixed(1)} 
            unit="%"
            subtitle="–ó–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"
            icon="üöÄ"
            color={keyMetrics.growthRate >= 0 ? 'green' : 'red'}
          />
          <MetricCard 
            title="–õ—É—á—à–∏–π –¥–µ–Ω—å" 
            value={keyMetrics.bestDay}
            subtitle="–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π"
            icon="üèÜ"
            color="purple"
          />
          <MetricCard 
            title="–î–æ—Ö–æ–¥ –≤ —á–∞—Å" 
            value={keyMetrics.avgPerHour.toFixed(0)} 
            unit="‚ÇΩ"
            subtitle="–°—Ä–µ–¥–Ω—è—è –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞"
            icon="‚è∞"
            color="blue"
          />
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ */}
      {targetAnalysis && (
        <TargetProgress targetAnalysis={targetAnalysis} darkMode={darkMode} />
      )}

      {/* –ü—Ä–æ–≥–Ω–æ–∑—ã */}
      <ForecastPanel 
        forecasts={forecastData} 
        workingDays={forecastData.workingDays} 
        darkMode={darkMode} 
      />

      {/* –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ */}
      {trendAnalysis && (
        <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
          <h3 className="text-lg font-semibold mb-3 text-gradient-primary">üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤</h3>
          <div className={`p-4 rounded-lg ${trendAnalysis.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : trendAnalysis.trend === 'down' ? 'bg-red-50 dark:bg-red-900/20' : 'bg-blue-50 dark:bg-blue-900/20'}`}>
            <div className="flex items-center gap-3 mb-2">
              <span className="text-2xl">
                {trendAnalysis.trend === 'up' ? 'üìà' : trendAnalysis.trend === 'down' ? 'üìâ' : 'üìä'}
              </span>
              <div>
                <p className="font-semibold">
                  {trendAnalysis.trend === 'up' ? '–†–æ—Å—Ç' : trendAnalysis.trend === 'down' ? '–°–Ω–∏–∂–µ–Ω–∏–µ' : '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'} 
                  {' '}–Ω–∞ {trendAnalysis.trendPercent.toFixed(1)}%
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-300">
                  {trendAnalysis.recommendation}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Å–º–µ–Ω */}
      {hourlyEfficiency.length > 0 && (
        <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
          <h3 className="text-lg font-semibold mb-4 text-gradient-primary">üåÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Å–º–µ–Ω</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {hourlyEfficiency.map((item, index) => (
              <div key={index} className="text-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                <h4 className="font-semibold text-lg">{item.type}</h4>
                <p className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                  {item.avgEarnings.toLocaleString()} ‚ÇΩ
                </p>
                <p className="text-sm text-gray-500">{item.count} —Å–º–µ–Ω</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ */}
      <div>
        <h2 className="text-xl font-semibold text-center mb-4">üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º</h2>
        <div className="flex justify-center space-x-2 mb-6">
          {PERIODS.map(p => (
            <button 
              key={p.id} 
              onClick={() => {
                setSelectedPeriod(p.id);
                hapticButton();
              }} 
              className={`px-4 py-2 rounded-lg font-semibold transition-all duration-200 ${
                selectedPeriod === p.id 
                  ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg transform scale-105' 
                  : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'
              }`}
            >
              {p.label}
            </button>
          ))}
        </div>

        {/* –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <MetricCard title="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥" value={stats.totalEarnings} unit="‚ÇΩ" icon="üíµ" color="green" />
          <MetricCard title="–ü–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥" value={stats.totalPicks} icon="üì¶" color="blue" />
          <MetricCard title="–°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫" value={stats.averageEarnings} unit="‚ÇΩ" icon="üìä" color="purple" />
          <MetricCard title="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –ø–∏–∫–æ–≤" value={stats.averagePicks} icon="üéØ" color="orange" />
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Line 
              options={getChartOptions('üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞')} 
              data={{ 
                labels: chartData.labels, 
                datasets: [{ 
                  label: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ (‚ÇΩ)', 
                  data: chartData.earnings, 
                  borderColor: '#8b5cf6',
                  backgroundColor: 'rgba(139, 92, 246, 0.1)',
                  fill: true,
                  tension: 0.4
                }] 
              }} 
            />
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ –ø–∏–∫–æ–≤ */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Bar 
              options={getChartOptions('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫–æ–≤')} 
              data={{ 
                labels: chartData.labels, 
                datasets: [{ 
                  label: '–ü–∏–∫–∏', 
                  data: chartData.picks, 
                  backgroundColor: 'rgba(59, 130, 246, 0.8)',
                  borderColor: '#3b82f6',
                  borderWidth: 1
                }] 
              }} 
            />
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Bar 
              options={getChartOptions('üìÖ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')} 
              data={{ 
                labels: WEEKDAY_LABELS, 
                datasets: [{ 
                  label: '–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (‚ÇΩ)', 
                  data: getWeekdayStats(), 
                  backgroundColor: 'rgba(139, 92, 246, 0.8)',
                  borderColor: '#8b5cf6',
                  borderWidth: 1
                }] 
              }} 
            />
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Line 
              options={getChartOptions('üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º')} 
              data={{ 
                labels: getWeeklyStats().labels, 
                datasets: [{ 
                  label: '–î–æ—Ö–æ–¥ –ø–æ –Ω–µ–¥–µ–ª—è–º (‚ÇΩ)', 
                  data: getWeeklyStats().data, 
                  borderColor: '#22c55e',
                  backgroundColor: 'rgba(34, 197, 94, 0.1)',
                  fill: true,
                  tension: 0.4
                }] 
              }} 
            />
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Line 
              options={getChartOptions('üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')} 
              data={{ 
                labels: monthlyTrends.labels, 
                datasets: [{ 
                  label: '–î–æ—Ö–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º (‚ÇΩ)', 
                  data: monthlyTrends.data, 
                  borderColor: '#3b82f6',
                  backgroundColor: 'rgba(59, 130, 246, 0.1)',
                  fill: true,
                  tension: 0.4
                }] 
              }} 
            />
          </div>
        </div>

        {/* –ü–ª–∞–Ω/–§–∞–∫—Ç */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
          <div style={{ height: '300px' }}>
            <Line 
              options={getChartOptions('üéØ –ü–ª–∞–Ω vs –§–∞–∫—Ç')} 
              data={{ 
                labels: getPlanFactStats().labels, 
                datasets: [
                  { 
                    label: '–ü–ª–∞–Ω (‚ÇΩ)', 
                    data: getPlanFactStats().plan, 
                    borderColor: '#a855f7',
                    backgroundColor: 'rgba(168, 85, 247, 0.1)',
                    borderDash: [5, 5], 
                    fill: false,
                    tension: 0.4
                  }, 
                  { 
                    label: '–§–∞–∫—Ç (‚ÇΩ)', 
                    data: getPlanFactStats().fact, 
                    borderColor: '#22c55e',
                    backgroundColor: 'rgba(34, 197, 94, 0.1)',
                    fill: true,
                    tension: 0.4
                  }
                ] 
              }} 
            />
          </div>
        </div>
      </div>

      {/* –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className={`p-4 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg border border-gray-200 dark:border-gray-700`}>
        <h3 className="text-lg font-semibold mb-4 text-gradient-primary">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <h4 className="font-semibold text-blue-600 dark:text-blue-400 mb-2">üöÄ –î–ª—è —Ä–æ—Å—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –¥–Ω–∏</li>
              <li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–µ—Ä–µ—Ä—ã–≤–æ–≤</li>
              <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Å–º–µ–Ω</li>
            </ul>
          </div>
          
          <div className="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
            <h4 className="font-semibold text-green-600 dark:text-green-400 mb-2">‚ö° –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫</li>
              <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö</li>
              <li>‚Ä¢ –°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
} 