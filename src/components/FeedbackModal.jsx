import React, { useState } from 'react';
import { CSSTransition } from 'react-transition-group';
import { useHaptic } from '../hooks/useHaptic';

export function FeedbackModal({ onClose, darkMode }) {
  const [status, setStatus] = useState('idle'); // idle | sending | success | error
  const { hapticSuccess, hapticWarning } = useHaptic();
  const [feedbackType, setFeedbackType] = useState('üí° –£–ª—É—á—à–µ–Ω–∏–µ');

  const handleSubmit = async (event) => {
    event.preventDefault();
    const form = event.target;
    const data = new FormData(form);

    setStatus('sending');
    try {
      const response = await fetch(form.action, {
        method: form.method,
        body: data,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        setStatus('success');
        hapticSuccess();
        setTimeout(() => {
          onClose();
        }, 2000); // –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      } else {
        throw new Error('Network response was not ok.');
      }
    } catch (error) {
      console.error('Feedback submission error:', error);
      setStatus('error');
      hapticWarning();
    }
  };

  return (
    <CSSTransition in timeout={300} classNames="modal" unmountOnExit appear>
      <div className="fixed inset-0 z-50 flex items-center justify-center modal-backdrop" onClick={onClose}>
        <div 
          className={`modal-content w-full max-w-md m-4 p-6 rounded-modern shadow-modern-xl ${darkMode ? 'bg-gray-800 text-gray-200' : 'bg-white text-gray-800'}`}
          onClick={(e) => e.stopPropagation()}
        >
          <h2 className="text-xl font-bold text-gradient-primary mb-4">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</h2>
          
          {status === 'success' ? (
            <div className="text-center py-8">
              <p className="text-lg font-semibold text-green-400">–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</p>
              <p className="text-sm text-gray-400">–û–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</p>
            </div>
          ) : (
            <form 
              action="https://formsubmit.co/shift-mate@yandex.com" 
              method="POST" 
              onSubmit={handleSubmit}
              className="space-y-4"
            >
              {/* –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FormSubmit */}
              <input type="hidden" name="_subject" value={`–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ ShiftMate! ${feedbackType}`} />
              <input type="hidden" name="_captcha" value="false" /> 
              <input type="hidden" name="_template" value="table" />

              <div>
                <label htmlFor="feedbackType" className="block text-sm font-medium mb-1">–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</label>
                <select
                  id="feedbackType"
                  name="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"
                  value={feedbackType}
                  onChange={(e) => setFeedbackType(e.target.value)}
                  className={`w-full px-3 py-2 rounded-modern border transition-colors ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-300'}`}
                >
                  <option>üí° –£–ª—É—á—à–µ–Ω–∏–µ</option>
                  <option>üêû –û—à–∏–±–∫–∞</option>
                  <option>‚ùì –í–æ–ø—Ä–æ—Å</option>
                  <option>üí¨ –î—Ä—É–≥–æ–µ</option>
                </select>
              </div>

              <div>
                <label htmlFor="message" className="block text-sm font-medium mb-1">–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
                <textarea
                  id="message"
                  name="–°–æ–æ–±—â–µ–Ω–∏–µ"
                  rows="5"
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É..."
                  className={`w-full px-3 py-2 rounded-modern border transition-colors ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-300'}`}
                  required
                />
              </div>

              <div className="flex justify-end gap-3 pt-2">
                <button type="button" onClick={onClose} className="btn-secondary" disabled={status === 'sending'}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn-primary" disabled={status === 'sending'}>
                  {status === 'sending' ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                </button>
              </div>
              {status === 'error' && <p className="text-red-500 text-sm text-center mt-2">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>}
            </form>
          )}
        </div>
      </div>
    </CSSTransition>
  );
} 