import React, { useState, useEffect } from 'react';
import { useSubscription, SUBSCRIPTION_PLANS, PAYMENT_PROVIDERS } from '../hooks/useSubscription';
import { useHaptic } from '../hooks/useHaptic';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const AnalyticsLockedPlaceholder = ({ onUpgradeClick, darkMode }) => {
  return (
    <div className={`min-h-96 flex flex-col items-center justify-center p-8 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} border-2 border-dashed border-gray-300 dark:border-gray-600`}>
      <div className="text-center space-y-6">
        {/* –ò–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ */}
        <div className="relative">
          <div className="w-20 h-20 mx-auto bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center shadow-lg">
            <span className="text-3xl">üîí</span>
          </div>
          <div className="absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center shadow-md">
            <span className="text-sm">‚ú®</span>
          </div>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div>
          <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Pro
          </h3>
          <p className="text-gray-600 dark:text-gray-400 max-w-md">
            –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å 8+ –º–µ—Ç—Ä–∏–∫–∞–º–∏, –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
          </p>
        </div>

        {/* –ü—Ä–µ–≤—å—é —Ñ—É–Ω–∫—Ü–∏–π */}
        <div className="grid grid-cols-2 gap-3 max-w-md">
          <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <span>üìä</span>
            <span>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏</span>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <span>üéØ</span>
            <span>–°–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π</span>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <span>üìà</span>
            <span>–ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Ö–æ–¥–æ–≤</span>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <span>üí°</span>
            <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
        <div className="space-y-2">
          <button
            onClick={onUpgradeClick}
            className="px-8 py-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
          >
            üöÄ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 299‚ÇΩ/–º–µ—Å—è—Ü
          </button>
          <p className="text-xs text-gray-500 dark:text-gray-400">
            –ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
          </p>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
const SubscriptionStatus = ({ subscription, onManageClick, darkMode }) => {
  const { hasAnalyticsAccess, getDaysRemaining } = useSubscription();
  const daysRemaining = getDaysRemaining();

  if (!hasAnalyticsAccess()) return null;

  return (
    <div className={`p-4 rounded-xl ${darkMode ? 'bg-green-900/20 border-green-700' : 'bg-green-50 border-green-200'} border`}>
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
            <span className="text-white text-lg">‚úÖ</span>
          </div>
          <div>
            <h3 className="font-semibold text-green-800 dark:text-green-200">
              –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Pro –∞–∫—Ç–∏–≤–Ω–∞
            </h3>
            <p className="text-sm text-green-600 dark:text-green-300">
              –û—Å—Ç–∞–ª–æ—Å—å {daysRemaining} {daysRemaining === 1 ? '–¥–µ–Ω—å' : daysRemaining < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
            </p>
          </div>
        </div>
        <button
          onClick={onManageClick}
          className="px-4 py-2 text-sm bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors"
        >
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        </button>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞
const PlanCard = ({ plan, isPopular, onSelect, darkMode }) => {
  return (
    <div className={`relative p-6 rounded-xl border-2 transition-all duration-300 hover:shadow-lg ${
      isPopular 
        ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20' 
        : darkMode ? 'border-gray-600 bg-gray-800' : 'border-gray-200 bg-white'
    }`}>
      {isPopular && (
        <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
          <span className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-1 rounded-full text-sm font-semibold">
            üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
          </span>
        </div>
      )}

      <div className="text-center mb-6">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2">
          {plan.name}
        </h3>
        <div className="flex items-baseline justify-center">
          <span className="text-3xl font-bold text-purple-600 dark:text-purple-400">
            {plan.price}‚ÇΩ
          </span>
          <span className="text-gray-500 dark:text-gray-400 ml-1">/–º–µ—Å—è—Ü</span>
        </div>
      </div>

      <ul className="space-y-3 mb-6">
        {plan.features.map((feature, index) => (
          <li key={index} className="flex items-start space-x-2 text-sm">
            <span className="mt-0.5">‚úÖ</span>
            <span className="text-gray-700 dark:text-gray-300">{feature}</span>
          </li>
        ))}
      </ul>

      <button
        onClick={() => onSelect(plan)}
        className={`w-full py-3 rounded-lg font-semibold transition-all duration-300 ${
          isPopular
            ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg hover:shadow-xl transform hover:scale-105'
            : darkMode 
              ? 'bg-gray-700 hover:bg-gray-600 text-white' 
              : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
        }`}
      >
        –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω
      </button>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
const PaymentMethodSelector = ({ selectedMethod, onSelect, darkMode }) => {
  return (
    <div className="space-y-3">
      <h4 className="font-semibold text-gray-900 dark:text-white">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</h4>
      <div className="grid grid-cols-1 gap-2">
        {Object.values(PAYMENT_PROVIDERS).map(provider => (
          <button
            key={provider.id}
            onClick={() => onSelect(provider.id)}
            disabled={!provider.available}
            className={`flex items-center space-x-3 p-3 rounded-lg border transition-all ${
              selectedMethod === provider.id
                ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/20'
                : darkMode 
                  ? 'border-gray-600 bg-gray-700 hover:bg-gray-600' 
                  : 'border-gray-200 bg-white hover:bg-gray-50'
            } ${!provider.available ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
          >
            <span className="text-2xl">{provider.icon}</span>
            <span className="font-medium text-gray-900 dark:text-white">
              {provider.name}
            </span>
            {!provider.available && (
              <span className="text-xs text-gray-500 ml-auto">–°–∫–æ—Ä–æ</span>
            )}
          </button>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ
const PaymentInstructions = ({ instructions, onCheckPayment, onBack, darkMode, loading }) => {
  return (
    <div className="space-y-6">
      <div className="text-center">
        <div className="w-16 h-16 mx-auto bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center mb-4">
          <span className="text-2xl">üí≥</span>
        </div>
        <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
          {instructions.title}
        </h3>
        <p className="text-2xl font-bold text-purple-600 dark:text-purple-400">
          {instructions.amount}‚ÇΩ
        </p>
      </div>

      <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-gray-50'}`}>
        <ol className="space-y-2">
          {instructions.steps.map((step, index) => (
            <li key={index} className="text-sm text-gray-700 dark:text-gray-300">
              {step}
            </li>
          ))}
        </ol>
      </div>

      {instructions.note && (
        <div className={`p-3 rounded-lg ${darkMode ? 'bg-blue-900/20' : 'bg-blue-50'}`}>
          <p className="text-sm text-blue-700 dark:text-blue-300">
            üí° {instructions.note}
          </p>
        </div>
      )}

      <div className="space-y-3">
        <button
          onClick={onCheckPayment}
          disabled={loading}
          className="w-full py-3 bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white font-semibold rounded-lg transition-colors"
        >
          {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
        </button>
        
        <button
          onClick={onBack}
          className={`w-full py-2 ${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-700'} transition-colors`}
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞
        </button>
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∫–∏
export function SubscriptionPage({ darkMode, onClose }) {
  const { hapticButton } = useHaptic();
  const {
    subscriptionStatus,
    hasAnalyticsAccess,
    initiatePayment,
    checkPaymentStatus,
    paymentLoading,
    paymentError,
    activateSubscription
  } = useSubscription();

  const [currentStep, setCurrentStep] = useState('plans'); // plans, payment, instructions
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('yoomoney');
  const [paymentInstructions, setPaymentInstructions] = useState(null);
  const [transactionId, setTransactionId] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const paymentStatus = urlParams.get('payment');
    
    if (paymentStatus === 'success') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      const pendingPayment = JSON.parse(localStorage.getItem('app_pending_payment') || '{}');
      if (pendingPayment.transactionId) {
        checkPaymentStatus(pendingPayment.transactionId);
      }
    } else if (paymentStatus === 'failed') {
      // –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      alert('–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }, []);

  const handlePlanSelect = (plan) => {
    setSelectedPlan(plan);
    setCurrentStep('payment');
    hapticButton();
  };

  const handlePayment = async () => {
    if (!selectedPlan) return;

    hapticButton();
    const result = await initiatePayment('MONTHLY', selectedPaymentMethod);
    
    if (result) {
      setPaymentInstructions(result.instructions);
      setTransactionId(result.transactionId);
      setCurrentStep('instructions');
    }
  };

  const handleCheckPayment = async () => {
    if (!transactionId) return;

    hapticButton();
    const result = await checkPaymentStatus(transactionId);
    
    if (result.status === 'success') {
      alert('üéâ ' + result.message);
      setCurrentStep('plans');
      if (onClose) onClose();
    } else if (result.status === 'error') {
      alert('‚ùå ' + result.message);
    } else {
      alert('‚è≥ ' + result.message);
    }
  };

  const handleBack = () => {
    setCurrentStep('plans');
    setSelectedPlan(null);
    setPaymentInstructions(null);
    setTransactionId(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const handleDemoActivation = () => {
    if (confirm('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?')) {
      activateSubscription('MONTHLY', 'demo_' + Date.now());
      alert('üéâ –î–µ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π!');
      if (onClose) onClose();
    }
  };

  return (
    <div className="min-h-screen p-4">
      <div className="max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            ShiftMate Pro
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          </p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ */}
        <SubscriptionStatus 
          subscription={subscriptionStatus}
          onManageClick={() => setCurrentStep('manage')}
          darkMode={darkMode}
        />

        {/* –û—à–∏–±–∫–∏ */}
        {paymentError && (
          <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg">
            <p className="text-red-700 dark:text-red-300">‚ùå {paymentError}</p>
          </div>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞ */}
        {currentStep === 'plans' && (
          <div className="space-y-8">
            {/* –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-1 gap-6 max-w-md mx-auto">
              <PlanCard
                plan={SUBSCRIPTION_PLANS.MONTHLY}
                isPopular={true}
                onSelect={handlePlanSelect}
                darkMode={darkMode}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {process.env.NODE_ENV === 'development' && (
              <div className="text-center">
                <button
                  onClick={handleDemoActivation}
                  className="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg text-sm"
                >
                  üß™ –î–µ–º–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è (—Ç–µ—Å—Ç)
                </button>
              </div>
            )}
          </div>
        )}

        {currentStep === 'payment' && selectedPlan && (
          <div className="max-w-md mx-auto space-y-6">
            {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω */}
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-gray-50'}`}>
              <h3 className="font-semibold text-gray-900 dark:text-white mb-2">
                –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:
              </h3>
              <div className="flex justify-between items-center">
                <span className="text-gray-700 dark:text-gray-300">{selectedPlan.name}</span>
                <span className="font-bold text-purple-600 dark:text-purple-400">
                  {selectedPlan.price}‚ÇΩ
                </span>
              </div>
            </div>

            {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã */}
            <PaymentMethodSelector
              selectedMethod={selectedPaymentMethod}
              onSelect={setSelectedPaymentMethod}
              darkMode={darkMode}
            />

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="space-y-3">
              <button
                onClick={handlePayment}
                disabled={paymentLoading}
                className="w-full py-3 bg-purple-500 hover:bg-purple-600 disabled:bg-gray-400 text-white font-semibold rounded-lg transition-colors"
              >
                {paymentLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : `–û–ø–ª–∞—Ç–∏—Ç—å ${selectedPlan.price}‚ÇΩ`}
              </button>
              
              <button
                onClick={handleBack}
                className={`w-full py-2 ${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-700'} transition-colors`}
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º
              </button>
            </div>
          </div>
        )}

        {currentStep === 'instructions' && paymentInstructions && (
          <div className="max-w-md mx-auto">
            <PaymentInstructions
              instructions={paymentInstructions}
              onCheckPayment={handleCheckPayment}
              onBack={handleBack}
              darkMode={darkMode}
              loading={paymentLoading}
            />
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        {onClose && (
          <div className="text-center mt-8">
            <button
              onClick={onClose}
              className={`px-6 py-2 rounded-lg transition-colors ${
                darkMode 
                  ? 'text-gray-400 hover:text-gray-300 hover:bg-gray-800' 
                  : 'text-gray-600 hover:text-gray-700 hover:bg-gray-100'
              }`}
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
          </div>
        )}
      </div>
    </div>
  );
}